
【＃タイトル】tpac記法

■概要

　tpac記法は、改行を含む長めの文章や、親子関係を簡単に記述するための記法です。
　名称は、長めの文章(Text)と親子関係(Parent And Child)に由来しています。

　以下のとおり、既存の記法では難しいことから独自に作成した記法です。

・XMLは、長いテキストや階層的なデータ構造を実現できますが、表現が冗長です。
・JSONや YAMLは、階層的なデータ構造を実現できますが、長いテキストの記述には向いていません。
・Groovy DSLは、文法的な誤りを含むテキストを記述できません。

　tpac文書は【リンク：TeaServerクラス：/gitdoc/tpac/groovydoc/io/github/longfish801/tpac/TeaServer.html】で解析できます。

■サンプル

　以下にTPAC文書のサンプルを示します。
　ファイル【リンク：sample/sample.tpac】として保存したとします。

----- コード -----
#! tpac account
# 山田太郎のアカウントです。
#> kind personal
#>> elem name 山田太郎
#>> elem age 19
#>> map family
#-father 山田一郎
#-mother 山田花子
#> elem remarks
編集中。
後で見直します。
#

#> elem hobby
#_国内旅行
#_
#	_Java
#	_Groovy
#_
読書も好きです。
推理小説をよく読みます。
#!!
----- コード -----

　上記の tpac文書を読みこんで、assertで内容を確認するスクリプト【リンク：sample/tpac.groovy】は以下の内容となります。

----- コード -----
@GrabResolver(name = 'longfish801 github repositry', root = 'https://longfish801.github.io/maven/')
@Grab('io.github.longfish801:tpac:0.2.00')
@GrabExclude('org.codehaus.groovy:groovy-all')

import io.github.longfish801.tpac.TeaServer;
import io.github.longfish801.tpac.element.TeaDec;

try {
	// tpac文書を解析し、宣言を参照します
	TeaServer server = new TeaServer();
	server.soak(new File('account.tpac'));
	TeaDec dec = server['tpac:account'];
	
	// 読込内容を確認します
	assert dec.key == 'tpac:account';
	assert dec.comment.handle == [ '山田太郎のアカウントです。' ];
	assert dec.lowers['kind:personal'].lowers['elem:name'].scalar == '山田太郎';
	assert dec.lowers['kind:personal'].lowers['elem:age'].scalar == 19;
	assert dec.lowers['kind:personal'].lowers['map:family'].map == 
		[ 'father': '山田一郎', 'mother': '山田花子' ];
	assert dec.lowers['remarks:'].text == [ '編集中。', '後で見直します。' ] as TpacText;
	assert dec.lowers['guarantor:name'].scalar.refer() == '山田一郎';
	assert dec.lowers['hobby:'].list ==
		[ '国内旅行', [ 'Java', 'Groovy' ], [ '読書も好きです。', '推理小説をよく読みます。' ] as TpacText ];
	
} catch (TeaServer.TeaServerParseException exc){
	println "tpac文書の読込に失敗しました。exc=${exc}";
}
----- コード -----

　上記の TPAC文書を、以下の XMLに変換できます。
　ファイル【リンク：sample/sample.xml】として保存したとします。

----- コード -----
#! tea アッサム
----- コード -----

　宣言よりも前に記述された内容は無視します。
　ハンドルと同様に、宣言もスカラー値、テキスト、リスト、マップをそれぞれ最大ひとつ持つことができます。詳しくは「■ハンドル」を参照してください。

■宣言終端

　以下をファイル【リンク：sample/sample.groovy】として保存したとします。
　groovyコマンドで実行すると、assertに成功します。

----- コード -----
#!!
----- コード -----

■ハンドル

　宣言以降にハンドルを記述してください。

　ハンドル開始行には、行頭に「#[数値]>」を記述してください。
　タグ名、名前を半角スペース区切りで記述します。
　タグ名の前にも半角スペースが必要です。
　[数値]は階層を表します。１以上の値を指定してください。
　たとえば以下のように親子関係を表現できます。

----- コード -----
#1> handle 親--
#2> handle 子1
#3> handle 孫11
#2> handle 子2
#2> handle 子3
#3> handle 孫31
#3> handle 孫32
----- コード -----

　階層が 1～3の場合のみ、省略記法が使えます。
　以下は、上記の例と同じ階層関係を表しています。

----- コード -----
#> handle 親--
#>> handle 子1
#>>> handle 孫11
#>> handle 子2
#>> handle 子3
#>>> handle 孫31
#>>> handle 孫32
----- コード -----

　タグ名は必須です。
　同じ宣言あるいは親に属す複数のハンドルがあるとき、タグ名は重複しても構いません。
　タグ名に改行コード、半角スペース、半角シャープ(#)、半角スラッシュ(/)、半角コロン(:)は使用できません。

　同じ宣言あるいは親に属す複数のハンドルがあるとき、タグ名と名前の組合せに重複は許されません。
　名前は省略可（空文字扱い）です。同じタグ名で、名前を省略できるハンドルはひとつだけとなります。
　名前に改行コード、半角スペース、半角シャープ(#)、半角スラッシュ(/)、半角コロン(:)は使用できません。

　ハンドルは、スカラー値、テキスト、リスト、マップをそれぞれ最大ひとつ持つことができます。
　スカラー値はハンドル開始行の名前の後に、半角スペース区切りで記述してください。スカラー値を指定するときは、ハンドルの名前を省略できません。
　テキスト、リスト、マップはハンドル開始行の次行以降に記述してください。
　たとえば以下のハンドルは、文字列'こころ'というスカラー値、[author: '夏目漱石', publisher: '新潮社']というマップを持っています。

----- コード -----
## book ISBN-999 こころ
#-author 夏目漱石
#-publisher 新潮社
----- コード -----

■ハンドル終端

　明示的にハンドルの終端を示すには「#」のみの行を記述してください。
　終端から次のハンドル開始行までの記述は無視します。

■スカラー値
□データ型

　以下のデータ型のスカラー値を指定できます。

・Null値（null）
・真偽（true, false）
・整数（12, 0, -3など）
　　→正規表現「\-?\d+」とマッチする文字列。
　　　java.lang.Integerとして保持します。
・浮動小数点（0.05, -1.0など）
　　→正規表現「\-?\d+\.\d+」とマッチする文字列。
　　　java.math.BigDecimalとして保持します。
・参照（@始まり）
・文字列
　　→上記以外

□参照

　参照は、他のハンドルやハンドルが保持する値を参照することができます。

・必ず半角アットマークから開始します。
・タグ名と名前を半角コロンで連結してください。
　名前が省略されている場合は空文字扱いとなります。
・文書とハンドルの親子関係は半角スラッシュで連結してください。
・絶対パス（先頭に文書を指定）する場合は半角スラッシュを文書の前に付与します。
・相対的に上位のハンドルを指すには「..」を利用してください。
・ハンドルが保持する値を参照する場合、半角シャープの後にたとえば以下を続けてください。これは Groovyスクリプトとして evalした値となります。
　　・スカラー値ならば固定文字列"scalar"
　　・テキストならば固定文字列"text"
　　・リストならば固定文字列"list"、必要ならインデックス番号（list[0]など）
　　・マップならば固定文字列"map"、必要ならばキー名（map['key']など）

　たとえば以下の文書内に対して「@/gconfig:account/account:t-yamada/language:#list[1]」を参照すると「英語」が返ります。リストの三番目にある「@#list[0]」は「日本語」を返します。

----- コード -----
#! gconfig config
#> account t-yamada 山田太郎
#>> language
#_日本語
#_英語
#_@#list[0]
----- コード -----

　スカラー値は tpac文書を解析した時点で、目的のデータ型に変換されてハンドルなどに保持されます。
　しかし、参照だけは遅延評価されます。値を参照されたときに初めて参照先の値を取得します。

□文字列

　明示的に文字列であることを示したい場合は、行頭を半角キャレット（^）で開始してください。
　空文字を指定したい場合は半角キャレットのみを記述してください。
　行頭を半角キャレットで開始した場合、Javaのエスケープシーケンスが使えます。

■テキスト

　改行を含む文字列は、直前に改行を入れて記述してください。
　テキストの各行は、先頭を「#」以外の文字で始める必要があります。
　先頭に「#」がある場合のみ、エスケープのためタブでインデントしてください。
　他のハンドルやコレクションが開始すれば、そこで終端とみなします。
　たとえば以下なら "吾輩は猫である。\n# 名前はまだ無い。\n"となります。

----- コード -----
## novel
吾輩は猫である。
	# 名前はまだ無い。
----- コード -----

　テキストは、各行を要素とするリストとして保持します。

■コレクション
□リスト

　リストは、各行の行頭に「#_」を記述し、その後にスカラー値を記述します。

----- コード -----
#_Java
#_Groovy
#_Perl
----- コード -----

　テキストの場合は「#_」の後に改行を入れて記述してください。

----- コード -----
#_
書を捨てよ。
街へでよう。
----- コード -----

□マップ

　マップは、各行の行頭に「#-」を記述し、その後にキーとスカラー値を記述します。
　キーとスカラー値は半角スペースで区切ります。
　キーに改行コード、半角スペース、半角シャープ(#)、半角スラッシュ(/)、半角コロン(:)は使用できません。
　キーは必ず文字列となる（他のデータ型をキーとできない）ことに注意してください。

----- コード -----
#-age 19
#-country Japan
----- コード -----

　テキストを値とするときは、キーの後に改行を入れて記述してください。

----- コード -----
#-memo
日曜日に工事がある。
本屋へ行くのはその後で。
----- コード -----

□コレクションのネスト

　インデントを入れることで、リストやマップをネストすることができます。

　リスト内リストは以下のように表現します。

----- コード -----
#_SF
#_ホラー
#_
#	_探偵小説
#	_サスペンス
#	_冒険小説
----- コード -----

　マップ内マップは以下のように表現します。

----- コード -----
#-age 19
#-family
#	-father 山田徳次郎
#	-mother 斉藤花子
----- コード -----

　リスト内マップは以下のように表現します。

----- コード -----
#_SF
#_ホラー
#_
#	-father 山田徳次郎
#	-mother 斉藤花子
----- コード -----

　マップ内リストは以下のように表現します。

----- コード -----
#-age 19
#-family
#	_山田徳次郎
#	_斉藤花子
----- コード -----

■コメント

　ハンドル開始行、テキスト、コレクションの後にコメントを記述できます。
　コメントは行頭を「#」で始めてください。
　「#」の後に半角スペースが必要です。
　コメントは、その直上にある要素へのコメントとみなします。

■初期値

　ハンドルが保持する値は、以下の初期値を持っています。

・スカラー値：Null値
・テキスト：空リスト
・リスト：空リスト
・マップ：空マップ

以上
